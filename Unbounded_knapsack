//knapsack unbounded 
#include<iostream>
using namespace std;
int unbounded_knapsack(int val[],int wt[],int w,int n){
    int t[n+1][w+1];
    for(int i=0;i<n+1;i++){
        for(int j=0;j<w+1;j++){
            if(i==0)
            t[i][j]=0;
            if(j==0)
            t[i][j]=0;
        }
    }
    for(int i=1;i<n+1;i++){
        for(int j=1;j<w+1;j++){
            if(wt[i-1]<=j)
            t[i][j]=max(val[i-1]+t[i][j-wt[i-1]],t[i-1][j]);
            else if(wt[i-1]>j){
                t[i][j]=t[i-1][j];
            }
        }
    }
    return t[n][w];
}
int main(){
    int val[]={1,30};
    int wt[]={1,50};
    int n=sizeof(wt)/sizeof(wt[0]);
    int w=100;
    cout<<"Maximum amount that could be make up  :"<<unbounded_knapsack(val,wt,w,n);
}
